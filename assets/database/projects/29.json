{
    "title": "microlzw",
    "content": "<h1 class=\"shimmer\">microlzw</h1><hr/><p>microlzw is a lightweight and embeddable Micro Lempel-Ziv-Welch (MLZW) compression library designed specifically for Arduino projects. It provides efficient string compression and decompression functionalities, catering to scenarios where memory and storage resources are limited.</p><ul><li><b>Memory-friendly</b> &mdash; Designed to work within the constraints of Arduino projects, ensuring efficient use of memory resources.</li><li><b>Easy Integration</b> &mdash; Simple and straightforward API for easy integration into your Arduino projects.</li><li><b>Comprehensive Documentation</b> &mdash; The header file includes detailed comments to guide developers in using the library effectively.</li></ul><br/><h3 class=\"shimmer border-secondary border-bottom\">API Documentation</h3><div style=\"overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #00aaaa\">void</span> <span style=\"color: #00aa00\">mlzw_compress</span>(<br/>    <span style=\"color: #00aaaa\">char</span> *input,<br/>    <span style=\"color: #00aaaa\">int</span> *compressed,<br/>    <span style=\"color: #00aaaa\">size_t</span> *comp_size,<br/>    <span style=\"color: #00aaaa\">int</span> dict_size<br/>);<br/></pre></div><p>Compresses a string using the Micro Lempel-Ziv-Welch algorithm.</p><h5>Description</h5><p>This function takes an input string and compresses it using the Micro Lempel-Ziv-Welch (MLZW) algorithm. The compressed output, compressed size, and dictionary size are returned through the parameters.</p><h5>Parameters</h5><ul><li><kbd>input</kbd> &mdash; The input string to be compressed.</li><li><kbd>compressed</kbd> &mdash; A pointer to an array that will store the compressed data.</li><li><kbd>comp_size</kbd> &mdash; A pointer to a variable that will store the size of the compressed data.</li><li><kbd>dict_size</kbd> &mdash; The size of the dictionary to be used in the compression.</li></ul><hr/><div style=\"overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\"><span style=\"color: #00aaaa\">void</span> <span style=\"color: #00aa00\">mlzw_decompress</span>(<br/>    <span style=\"color: #00aaaa\">int</span> *compressed,<br/>    <span style=\"color: #00aaaa\">size_t</span> comp_size,<br/>    <span style=\"color: #00aaaa\">char</span> *output,<br/>    <span style=\"color: #00aaaa\">int</span> dict_size<br/>);<br/></pre></div><p>Decompresses a string that was compressed using Micro Lempel-Ziv-Welch algorithm.</p><h5>Description</h5><p>This function takes a compressed input, decompresses it using the Micro Lempel-Ziv-Welch (MLZW) algorithm, and stores the decompressed output in the provided output buffer.</p><h5>Parameters</h5><ul><li><kbd>compressed</kbd> &mdash; A pointer to an array containing the compressed data.</li><li><kbd>comp_size</kbd> &mdash; The size of the compressed data.</li><li><kbd>output</kbd> &mdash; A pointer to an array that will store the decompressed output.</li><li><kbd>dict_size</kbd> &mdash; The size of the dictionary used in the compression.</li></ul><br/><div align=\"center\"><a class=\"btn-reactive-a\" href=\"https://github.com/nthnn/microlzw\" target=\"_blank\"><button class=\"btn-reactive btn-lg\"><div class=\"i-wrapper\"><i class=\"lni lni-github no-rotate\"></i></div><span class=\"lead\">Get on GitHub</span></button></a></div>"
}