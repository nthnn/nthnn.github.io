{
    "title": "ladivic",
    "content": "<h1 class=\"shimmer\">ladivic</h1><hr/><p>Ladivic is a C++ library designed to provide system-level thread- and fail-safe functions. It offers various functionalities related to asynchronous operations, atomic operations, input/output operations, inter-process communication (IPC), memory management, and system information retrieval. The library aims to simplify system-level programming tasks by providing robust and reliable functions that ensure thread safety and error handling. Hence, Ladivic stands as a versatile and indispensable asset for tackling complex system-level challenges with confidence and efficiency.</p><div class=\"overflow-auto w-auto\" style=\"border:solid var(--bs-gray);border-width:.1em .1em .1em .8em;padding:.2em .6em;\"><pre style=\"margin: 0; line-height: 125%\">#<span class=\"text-danger\">include</span> <span class=\"text-info\">&lt;ldvc_mem.hpp&gt;</span><br/>#<span class=\"text-danger\">include</span> <span class=\"text-info\">&lt;ldvc_type.hpp&gt;</span><br/><br/>#<span class=\"text-danger\">include</span> <span class=\"text-info\">&lt;iostream&gt;</span><br/><br/><span class=\"text-danger\">using namespace</span> <span class=\"text-success\">std</span>;<br/><br/>i32 <span class=\"text-success\">main</span> {<br/>    i32* i32_array = ldvc_malloc&lt;i32&gt;(<span class=\"text-info\">5</span>);<br/>    <span class=\"text-danger\">for</span>(usize i = <span class=\"text-info\">0</span>; i &lt; <span class=\"text-info\">5</span>; ++i)<br/>        i32_array[i] = <span class=\"text-danger\">static_cast</span>&lt;i32&gt;(i * <span class=\"text-info\">10</span>);<br/><br/>        cout &lt;&lt; <span class=\"text-info\">&quot;Original Array: &quot;</span>;<br/>    <span class=\"text-danger\">for</span>(usize i = <span class=\"text-info\">0</span>; i &lt; <span class=\"text-info\">5</span>; ++i)<br/>        std::cout &lt;&lt; i32_array[i] &lt;&lt; <span class=\"text-info\">&quot; &quot;</span>;<br/>    cout &lt;&lt; endl;<br/>}</pre></div><br/><div align=\"center\"><a class=\"btn-reactive-a\" href=\"https://github.com/nthnn/ladivic\" target=\"_blank\"><button class=\"btn-reactive btn-lg\"><div class=\"i-wrapper\"><i class=\"lni lni-github no-rotate\"></i></div><span class=\"lead\">Get on GitHub</span></button></a></div><br/><h1 class=\"shimmer\">Features</h1><hr/><ul><li><b>Asynchronous Operations</b><p>Ladivic facilitates seamless execution of asynchronous tasks with its suite of functions designed to handle concurrency elegantly. Developers can leverage ldvc_async_execute to execute functions asynchronously, providing a future object for result retrieval. Additionally, tasks can be scheduled with specified delays or timeouts using ldvc_async_execute_with_delay and ldvc_async_execute_with_timeout, enabling precise control over task execution in multithreaded environments.</p></li><li><b>Atomic Operations</b><p>Thread safety is paramount in system-level programming, and Ladivic delivers robust atomic operations to ensure data integrity in concurrent scenarios. With functions for atomic increment, decrement, exchange, load, store, and bitwise operations (AND, OR, XOR), developers can manipulate variables atomically with ease, safeguarding against race conditions and data corruption.</p></li><li><b>Input/Output Operations</b><p>Efficient handling of input/output operations is critical for system-level applications, and Ladivic streamlines this process with its input/output module. Developers can effortlessly read and write data to files using ldvc_io.hpp, with additional support for checking file existence and creating folders seamlessly, enhancing file management capabilities in system-level applications.</p></li><li><b>Inter-Process Communication (IPC)</b><p>Facilitating communication between processes is essential for building robust system-level applications, and Ladivic simplifies this process with its IPC module. By providing functions for creating, attaching, detaching, and destroying shared memory segments, Ladivic empowers developers to implement efficient inter-process communication mechanisms, enabling seamless data exchange and synchronization between processes.</p></li><li><b>Memory Management</b><p>Effective memory management is fundamental for optimizing system-level applications, and Ladivic offers powerful memory management functionalities to address this need. Developers can safely allocate and deallocate memory using thread-safe functions in the ldvc_mem.hpp module, ensuring efficient utilization of system resources and minimizing memory-related issues.</p></li><li><b>System Information Retrieval</b><p>Accessing essential system information is vital for system-level applications, and Ladivic simplifies this process with its system information retrieval module. Developers can retrieve critical system information such as CPU details, total memory, and disk space using functions in the ldvc_sysinfo.hpp module, enabling comprehensive system monitoring and analysis capabilities.</p></li></ul>"
}